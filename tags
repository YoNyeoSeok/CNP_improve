!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CNP_Net	model.py	/^class CNP_Net(nn.Module):$/;"	c
DataGenerator	data_generator.py	/^class DataGenerator():$/;"	c
Figure	utils/figure.py	/^class Figure():$/;"	c
Net_g	model.py	/^class Net_g(nn.Module):$/;"	c
Net_h	model.py	/^class Net_h(nn.Module):$/;"	c
__init__	data_generator.py	/^            input_range, window_range, window_step_size, random_window_position,$/;"	m	class:DataGenerator
__init__	model.py	/^                 layers_dim={'h':[8, 32, 128], 'g':[128, 64, 32, 16, 8]}):$/;"	m	class:CNP_Net
__init__	model.py	/^    def __init__(self, input_dim, layers_dim):$/;"	m	class:Net_h
__init__	model.py	/^    def __init__(self, layers_dim, io_dims):$/;"	m	class:Net_g
__init__	utils/figure.py	/^    def __init__(self, show=False):$/;"	m	class:Figure
args	main.py	/^args = parser.parse_args()$/;"	v
args	show_model.py	/^args = parser.parse_args()$/;"	v
contour_data	data_generator.py	/^    def contour_data(self, ax, data, c1='k', c2='gray', window_crop=False):$/;"	m	class:DataGenerator
datasource_list	main.py	/^datasource_list = ["gp1d1d", "gp2d1d", "branin"]$/;"	v
device	main.py	/^    device = torch.device("cpu")$/;"	v
device	main.py	/^    device = torch.device("cuda:"+str(args.gpu))$/;"	v
forward	model.py	/^    def forward(self, O, T):$/;"	m	class:CNP_Net
forward	model.py	/^    def forward(self, x):$/;"	m	class:Net_g
forward	model.py	/^    def forward(self, x):$/;"	m	class:Net_h
generate_batch	data_generator.py	/^    def generate_batch(self, batch_size=None, num_samples=None):$/;"	m	class:DataGenerator
generate_sample	data_generator.py	/^    def generate_sample(self, num_samples=None):$/;"	m	class:DataGenerator
generate_window_samples	data_generator.py	/^    def generate_window_samples(self, window_range=None, step_size=None):$/;"	m	class:DataGenerator
get_train_test_batch	data_generator.py	/^    def get_train_test_batch(self, batch_size=None):$/;"	m	class:DataGenerator
get_train_test_sample	data_generator.py	/^    def get_train_test_sample(self, x_y=None):$/;"	m	class:DataGenerator
help	main.py	/^        help="datasource list: %s"%datasource_list)$/;"	v
help	main.py	/^        help="figure show during traing")$/;"	v
help	main.py	/^        help="learning rate (default=1e-4)")$/;"	v
help	main.py	/^        help="load model. format: folder\/iteration")$/;"	v
help	main.py	/^        help="log folder name in logs\/ (default: log)")$/;"	v
help	main.py	/^        help="save loss, fig and model log")$/;"	v
help	main.py	/^        help="test flag (not train)")$/;"	v
help	main.py	/^        help="use gpu")$/;"	v
help	main.py	/^        help='batch size (default: 32)')$/;"	v
help	main.py	/^        help='function input range (default: [-2, 2])')$/;"	v
help	main.py	/^        help='max iteration (default=10000')$/;"	v
help	main.py	/^        help='number of samples is random flag')$/;"	v
help	main.py	/^        help='number of samples random range, few-shot number random range (default: [1 51])')$/;"	v
help	main.py	/^        help='number of samples, few-shot number of train, test (default: [5, 5])')$/;"	v
help	main.py	/^        help='number of task to train, 0 is infinite (default=0)')$/;"	v
help	main.py	/^        help='plot window position by random in input range (default: false)')$/;"	v
help	main.py	/^        help='plot window range (default: input_range)')$/;"	v
help	main.py	/^        help='plot window step size (default: 1.0)')$/;"	v
help	main.py	/^        help='train test set data are not disjoint setting flag')$/;"	v
help	show_model.py	/^        help='load model')$/;"	v
main	main.py	/^def main():$/;"	f
make_fig_ax	data_generator.py	/^    def make_fig_ax(self, fig):$/;"	m	class:DataGenerator
make_fig_title	data_generator.py	/^    def make_fig_title(self, fig, title="test"):$/;"	m	class:DataGenerator
model	show_model.py	/^model = torch.load(args.load_model)$/;"	v
parser	main.py	/^parser = argparse.ArgumentParser()$/;"	v
parser	show_model.py	/^parser = argparse.ArgumentParser()$/;"	v
plot_branin	data_generator.py	/^    def plot_branin(self, ax, data, c='c'):$/;"	m	class:DataGenerator
plot_data	data_generator.py	/^    def plot_data(self, ax, data, c1='k', c2='gray', window_crop=False):$/;"	m	class:DataGenerator
plot_fill_xy	utils/figure.py	/^    def plot_fill_xy(self, x, y_mu, y_cov, color_l='k', color_f='k',$/;"	m	class:Figure
plot_gp	data_generator.py	/^    def plot_gp(self, ax, train, data, c='c'):$/;"	m	class:DataGenerator
plot_xy	utils/figure.py	/^    def plot_xy(self, x, y, color='k'):$/;"	m	class:Figure
scatter_data	data_generator.py	/^    def scatter_data(self, ax, data, c='k'):$/;"	m	class:DataGenerator
scatter_xy	utils/figure.py	/^    def scatter_xy(self, x, y, color='k'):$/;"	m	class:Figure
set_axis	utils/figure.py	/^    def set_axis(self, xlim=[-2,2], ylim=[-3,3]):$/;"	m	class:Figure
use_cuda	main.py	/^    use_cuda = False$/;"	v
use_cuda	main.py	/^    use_cuda = True$/;"	v
window_crop	data_generator.py	/^    def window_crop(self, x, window_range=None):$/;"	m	class:DataGenerator
